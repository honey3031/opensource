@@ -1,73 +1,11 @@
from flask import Flask, render_template, request, jsonify
import csv
import streamlit as st
from predict_page import show_predict_page
from explore_page import show_explore_page

app = Flask(__name__)

# File path to the CSV
CSV_FILE = "books.csv"
page = st.sidebar.selectbox("Explore Or Predict", ("Predict", "Explore"))

# Helper function to read data from CSV
def read_csv():
    with open(CSV_FILE, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        return [row for row in reader]

# Helper function to write data to CSV
def write_csv(data):
    try:
        with open(CSV_FILE, mode='w', newline='') as file:
            fieldnames = ['id', 'title', 'author', 'genre']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for row in data:
                writer.writerow(row)
    except Exception as e:
        print("Error writing to CSV:", e)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/books', methods=['GET'])
def get_books():
    return jsonify(read_csv())

@app.route('/books', methods=['POST'])
def add_book():
    data = read_csv()
    new_book = {
        'id': len(data) + 1,
        'title': request.json['title'],
        'author': request.json['author'],
        'genre': request.json['genre']
    }
    data.append(new_book)
    write_csv(data)
    return jsonify(new_book)

@app.route('/books/<int:id>', methods=['POST'])
def update_book(id):
    data = read_csv()
    updated_book = None
    for book in data:
        if book['id'] == id:
            book['title'] = request.json['title']
            book['author'] = request.json['author']
            book['genre'] = request.json['genre']
            updated_book = book
            break
    write_csv(data)
    if updated_book:
        return jsonify(updated_book)
    else:
        return jsonify({"message": "Book not found"}), 404

@app.route('/books/<int:id>', methods=['DELETE'])
def delete_book(id):
    data = read_csv()
    data = [book for book in data if book['id'] != id]
    write_csv(data)
    return jsonify({"message": "Book deleted successfully"})

if __name__ == '__main__':
    app.run(debug=True)
if page == "Predict":
    show_predict_page()
else:
    show_explore_page()
 91 changes: 91 additions & 0 deletions91  
explore_page.py
Viewed
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,91 @@
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

def shorten_categories(categories, cutoff):
    categorical_map = {}
    for i in range(len(categories)):
        if categories.values[i] >= cutoff:
            categorical_map[categories.index[i]] = categories.index[i]
        else:
            categorical_map[categories.index[i]] = 'Other'
    return categorical_map


def clean_experience(x):
    if x ==  'More than 50 years':
        return 50
    if x == 'Less than 1 year':
        return 0.5
    return float(x)


def clean_education(x):
    if 'Bachelor’s degree' in x:
        return 'Bachelor’s degree'
    if 'Master’s degree' in x:
        return 'Master’s degree'
    if 'Professional degree' in x or 'Other doctoral' in x:
        return 'Post grad'
    return 'Less than a Bachelors'


@st.cache
def load_data():
    df = pd.read_csv("survey_results_public.csv")
    df = df[["Country", "EdLevel", "YearsCodePro", "Employment", "ConvertedComp"]]
    df = df[df["ConvertedComp"].notnull()]
    df = df.dropna()
    df = df[df["Employment"] == "Employed full-time"]
    df = df.drop("Employment", axis=1)

    country_map = shorten_categories(df.Country.value_counts(), 400)
    df["Country"] = df["Country"].map(country_map)
    df = df[df["ConvertedComp"] <= 250000]
    df = df[df["ConvertedComp"] >= 10000]
    df = df[df["Country"] != "Other"]

    df["YearsCodePro"] = df["YearsCodePro"].apply(clean_experience)
    df["EdLevel"] = df["EdLevel"].apply(clean_education)
    df = df.rename({"ConvertedComp": "Salary"}, axis=1)
    return df

df = load_data()

def show_explore_page():
    st.title("Explore Software Engineer Salaries")

    st.write(
        """
    ### Stack Overflow Developer Survey 2020
    """
    )

    data = df["Country"].value_counts()

    fig1, ax1 = plt.subplots()
    ax1.pie(data, labels=data.index, autopct="%1.1f%%", shadow=True, startangle=90)
    ax1.axis("equal")  # Equal aspect ratio ensures that pie is drawn as a circle.

    st.write("""#### Number of Data from different countries""")

    st.pyplot(fig1)

    st.write(
        """
    #### Mean Salary Based On Country
    """
    )

    data = df.groupby(["Country"])["Salary"].mean().sort_values(ascending=True)
    st.bar_chart(data)

    st.write(
        """
    #### Mean Salary Based On Experience
    """
    )

    data = df.groupby(["YearsCodePro"])["Salary"].mean().sort_values(ascending=True)
    st.line_chart(data)

 59 changes: 59 additions & 0 deletions59  
predict_page.py
Viewed
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,59 @@
import streamlit as st
import pickle
import numpy as np


def load_model():
    with open('saved_steps.pkl', 'rb') as file:
        data = pickle.load(file)
    return data

data = load_model()

regressor = data["model"]
le_country = data["le_country"]
le_education = data["le_education"]

def show_predict_page():
    st.title("Software Developer Salary Prediction")

    st.write("""### We need some information to predict the salary""")

    countries = (
        "United States",
        "India",
        "United Kingdom",
        "Germany",
        "Canada",
        "Brazil",
        "France",
        "Spain",
        "Australia",
        "Netherlands",
        "Poland",
        "Italy",
        "Russian Federation",
        "Sweden",
    )

    education = (
        "Less than a Bachelors",
        "Bachelor’s degree",
        "Master’s degree",
        "Post grad",
    )

    country = st.selectbox("Country", countries)
    education = st.selectbox("Education Level", education)

    expericence = st.slider("Years of Experience", 0, 50, 3)

    ok = st.button("Calculate Salary")
    if ok:
        X = np.array([[country, education, expericence ]])
        X[:, 0] = le_country.transform(X[:,0])
        X[:, 1] = le_education.transform(X[:,1])
        X = X.astype(float)

        salary = regressor.predict(X)
        st.subheader(f"The estimated salary is ${salary[0]:.2f}")
